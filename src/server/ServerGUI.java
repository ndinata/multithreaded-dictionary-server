package server;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.ServerSocket;

/**
 * Main GUI class of the dictionary server, handling direct user input.
 * Most of the code here is auto-generated by the GUI designer tool Eclipse
 * WindowBuilder (https://www.eclipse.org/windowbuilder/).
 * 
 * @author Nico Eka Dinata (770318)
 * 
 */
public class ServerGUI extends JFrame {
    /** Whether the GUI is still running or not. */
    private boolean isRunning;

    /** Whether the server should start listening for connections. */
    private boolean shouldServerStart;

    /** The number of threads to be used in the server thread pool. */
    private int threadCount;

    /** Underlying socket allowing connections to the server. */
    private ServerSocket serverSocket;

    private JTextField threadCountInput;

    private JTextArea setResults;

    public ServerGUI() {
        this.isRunning = true;
        this.shouldServerStart = false;
        this.threadCount = 0;
        this.serverSocket = null;
        this.initialiseGUI();

        // try to shut down the server when window is closed by the user
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                isRunning = false;
                if (serverSocket != null) {
                    try {
                        serverSocket.close();
                    } catch (IOException ioe) {
                        System.err.println("ServerError: unable to close socket");
                    }
                }
            }
        });
    }

    public boolean isRunning() {
        return this.isRunning;
    }

    public boolean shouldServerStart() {
        return this.shouldServerStart;
    }

    public int useThreadCount(ServerSocket serverSocket) {
        this.serverSocket = serverSocket;
        return this.threadCount;
    }

    /** Prepare and display the client GUI. */
    private void initialiseGUI() {
        setTitle("Dictionary Server");
        setSize(640, 200);
        getContentPane().setLayout(null);

        JLabel threadCountLabel = new JLabel("Number of Threads:");
        threadCountLabel.setFont(new Font("Helvetica Neue", Font.PLAIN, 14));
        threadCountLabel.setBounds(12, 16, 140, 16);
        getContentPane().add(threadCountLabel);

        threadCountInput = new JTextField();
        threadCountInput.setBounds(152, 8, 240, 34);
        threadCountInput.setFont(new Font("Helvetica Neue", Font.PLAIN, 13));
        getContentPane().add(threadCountInput);
        threadCountInput.setColumns(10);

        JButton setThreadCountButton = new JButton("Set");
        setThreadCountButton.setFont(new Font("Helvetica Neue", Font.PLAIN, 14));
        setThreadCountButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // when "Set" is pressed, validate if the input text is a valid
                // positive integer
                String threadCountText = threadCountInput.getText();
                if (threadCountText == null || threadCountText.isBlank()) {
                    setResults.setText("Invalid thread count, value cannot be empty.");
                    return;
                }

                int threadCountInt = 0;
                try {
                    threadCountInt = Integer.parseInt(threadCountText);
                    if (threadCountInt <= 0) {
                        throw new NumberFormatException();
                    }
                } catch (NumberFormatException nfe) {
                    setResults.setText("Invalid thread count, please try a different number.");
                    return;
                }

                // valid thread count
                threadCount = threadCountInt;
                setResults.setText("Success!");
            }
        });
        setThreadCountButton.setBounds(410, 8, 80, 34);
        getContentPane().add(setThreadCountButton);

        setResults = new JTextArea();
        setResults.setFont(new Font("Helvetica Neue", Font.PLAIN, 13));
        setResults.setEditable(false);
        setResults.setLineWrap(true);
        setResults.setBounds(12, 50, 615, 60);
        getContentPane().add(setResults);

        JButton startServerButton = new JButton("Start Server");
        startServerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // if thread count is not valid, don't allow starting the server
                if (threadCount <= 0) {
                    setResults.setText("Invalid thread count, please enter a positive integer before starting.");
                    return;
                }

                // start the server, disabling all buttons
                shouldServerStart = true;
                setResults.setText("Server has started.");
                startServerButton.setText("Started.");
                startServerButton.setEnabled(false);
                setThreadCountButton.setEnabled(false);
            }
        });
        startServerButton.setFont(new Font("Helvetica Neue", Font.PLAIN, 14));
        startServerButton.setBounds(250, 120, 140, 34);
        getContentPane().add(startServerButton);

        setVisible(true);
    }
}
